buildscript {
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:2.1.0'
		classpath 'com.github.alxndrsn:android-check:1f87548c0686d823e5f1490a2053b70bd9f5022e'
		classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
	}
	configurations.all {
		resolutionStrategy {
			// use old jacoco so Robolectric test coverage is included in reports
			// track https://github.com/paveldudka/JacocoEverywhere/issues/14 for a less hacky solution
			force 'org.jacoco:org.jacoco.core:0.7.2.201409121644'
		}
	}
}
apply plugin: 'com.android.application'
apply plugin: 'com.noveogroup.android.check'
apply plugin: 'jacoco-everywhere'

// enable verbose lint warnings
gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
	}
}

repositories {
	mavenCentral()
	maven { url 'https://s3.amazonaws.com/repo.commonsware.com' }
	maven { url "${System.env.ANDROID_HOME}/extras/android/m2repository/" }
}

dependencies {
	testCompile 'junit:junit:4.12'
	testCompile 'org.robolectric:robolectric:3.1.4'
	testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'
	testCompile 'org.mockito:mockito-core:1.10.19'

	androidTestCompile 'junit:junit:4.12'
	androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'
	androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'

	compile 'com.android.support:support-v4:23.0.1'
	compile 'com.commonsware.cwac:wakeful:1.1.0'
	compile 'com.google.code.findbugs:annotations:3.0.1', {
		// Need to exclude these, or build is broken by:
		//   com.android.dex.DexException: Multiple dex files define Ljavax/annotation/CheckForNull
		exclude module: 'jsr305'
		exclude module: 'jcip-annotations'
	}
}

def getVersionCode = {
	if(System.env.JENKINS == 'true') {
		def versionParts = System.env.VERSION_TO_BUILD.split(/\./)
		if(versionParts.length != 3)
			throw new RuntimeException("Unexpected version number - should be of form 'x.y.z', but was: $System.env.VERSION_TO_BUILD")
		versionParts = versionParts.collect { Integer.parseInt(it) }
		if(versionParts[1] > 999 || versionParts[2] > 999)
			throw new RuntimeException('Version part greater than 999 not allowed.')
		int versionCode = (1000000 * versionParts[0]) +
				  (1000 * versionParts[1]) +
				  versionParts[2]
		if(versionCode > 2100000000)
			throw new RuntimeException('versionCode biggger than max allowed by Google Play.')
		return versionCode
	}
	return 1
}
def getVersionName = {
	System.env.VERSION_TO_BUILD ?: 'SNAPSHOT'
}

connectedCheck.doLast {
	// Add CLI report for Jacoco coverage
	def slurper = new XmlSlurper()
	slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false) 
	slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);

	['generic', 'medic'].each { flavour ->
		def report = slurper.parse("./build/reports/coverage/${flavour}/debug/report.xml")

		println "------ Code Coverage (flavour: $flavour)) ------"
		report.package.each { p ->
			println "--> ${p.@name.toString().replaceAll('/', '.')}"
			p.counter.each { c ->
				def covered = c.@covered.toString() as int
				def missed = c.@missed.toString() as int
				def percent = ((100 * covered) / (covered + missed))
				println String.format('    %-16s %.1f ', c.@type, percent) + '%'
			}
			println "----------------------------------"
		}
	}
}

android {
	compileSdkVersion 23
	buildToolsVersion '23.0.3'

	packagingOptions {
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
	}

	defaultConfig {
		versionCode getVersionCode()
		versionName getVersionName()
		archivesBaseName = "${project.name}-${versionName}"

		testInstrumentationRunner 'medic.gateway.alert.test.WakingJUnitRunner'
	}

	applicationVariants.all {
		buildConfigField "String", "LOG_TAG", '"MedicGateway"'
		buildConfigField "boolean", "DISABLE_APP_URL_VALIDATION", "Boolean.parseBoolean(\"${System.env.DISABLE_APP_URL_VALIDATION}\")";
		buildConfigField "boolean", "FORCE_SEED", "Boolean.parseBoolean(\"${System.env.FORCE_SEED}\")";
		buildConfigField "boolean", "LOAD_SEED_DATA", "Boolean.parseBoolean(\"${System.env.LOAD_SEED_DATA}\")";
	}

	sourceSets {
		test { java.srcDirs = [ 'src/test/java', 'src/libTest/java' ] }
		androidTest { java.srcDirs = [ 'src/androidTest/java', 'src/libTest/java' ] }
	}

	signingConfigs {
		release {
			storeFile file(System.env.ANDROID_KEYSTORE_PATH ?: signingConfigs.debug.storeFile)
			storePassword System.env.ANDROID_KEYSTORE_PASSWORD ?: signingConfigs.debug.storePassword
			keyAlias System.env.ANDROID_KEY_ALIAS ?: signingConfigs.debug.keyAlias
			keyPassword System.env.ANDROID_KEY_PASSWORD ?: signingConfigs.debug.keyPassword
		}
	}

	buildTypes {
		debug {
			testCoverageEnabled = true
		}
		release {
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'config/proguard.pro'
			signingConfig signingConfigs.release
		}
	}

	check {
		abortOnError true
	}

	lintOptions {
		disable 'UnusedResources' // linter can't handle static imports, so just skip this test
		disable 'IconMissingDensityFolder' // we don't care about nice icons at the moment
		disable 'GradleDependency' // TODO update to latest support-v4 lib and re-enable this rule

		warningsAsErrors true

		if(System.env.TRAVIS == 'true') {
			abortOnError true
			htmlReport false
			xmlReport false
			textReport true
			textOutput 'stdout'
		}
	}

	testOptions {
		unitTests.all {
			testLogging {
				events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
				outputs.upToDateWhen { false }
				showStandardStreams = true
			}
		}
	}

	productFlavors {
		generic {
			applicationId = 'medic.gateway.alert.generic'
			buildConfigField "boolean", "IS_MEDIC_FLAVOUR", "false"
		}
		medic {
			applicationId = 'medic.gateway.alert'
			buildConfigField "boolean", "IS_MEDIC_FLAVOUR", "true"
		}
	}
}
