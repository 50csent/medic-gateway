buildscript {
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:2.1.0'
		classpath 'com.github.alxndrsn:android-check:1f87548c0686d823e5f1490a2053b70bd9f5022e'
		classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
	}
}

apply plugin: 'com.android.application'
apply plugin: 'com.noveogroup.android.check'
apply plugin: 'jacoco-everywhere'

// enable verbose lint warnings
gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
	}
}

repositories {
	mavenCentral()
	maven { url 'https://s3.amazonaws.com/repo.commonsware.com' }
}

dependencies {
	testCompile 'junit:junit:4.12'
	testCompile 'org.robolectric:robolectric:3.1-rc1'
	testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'

	androidTestCompile 'junit:junit:4.12'
	androidTestCompile 'org.mockito:mockito-core:1.10.19'
	androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4'
	androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
	androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
	androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'
	androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'

	compile 'com.commonsware.cwac:wakeful:1.1.0'
	compile 'com.google.code.findbugs:annotations:3.0.1', {
		// Need to exclude these, or build is broken by:
		//   com.android.dex.DexException: Multiple dex files define Ljavax/annotation/CheckForNull
		exclude module: 'jsr305'
		exclude module: 'jcip-annotations'
	}
}

def getVersionCode = {
	// Use `1` for the version code until we have a public release.  At that
	// stage, we'll have to start incrementing this for every release.
	return 1;
}
def getVersionName = {
	System.env.VERSION_TO_BUILD ?: 'SNAPSHOT'
}

connectedCheck.doLast {
	// Add CLI report for Jacoco coverage
	def slurper = new XmlSlurper()
	slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false) 
	slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);

	def report = slurper.parse('./build/reports/coverage/debug/report.xml')

	println "------ Code Coverage ------"
	report.package.each { p ->
		println "--> ${p.@name.toString().replaceAll('/', '.')}"
		p.counter.each { c ->
			def covered = c.@covered.toString() as int
			def missed = c.@missed.toString() as int
			def percent = ((100 * covered) / (covered + missed))
			println String.format('    %-16s %.1f ', c.@type, percent) + '%'
		}
		println "---------------------------"
	}
}

android {
	if(System.env.TRAVIS == 'true') {
		compileSdkVersion 21
		buildToolsVersion '21.1.2'
	} else {
		compileSdkVersion 23
		buildToolsVersion '23.0.1'
	}
	packagingOptions {
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
	}

	defaultConfig {
		versionCode getVersionCode()
		versionName getVersionName()
		archivesBaseName = "${project.name}-${versionName}"

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}

	applicationVariants.all {
		buildConfigField "String", "LOG_TAG", '"MedicGateway"'
		buildConfigField "boolean", "DISABLE_APP_URL_VALIDATION", "Boolean.parseBoolean(\"${System.env.DISABLE_APP_URL_VALIDATION}\")";
		buildConfigField "boolean", "LOAD_SEED_DATA", "Boolean.parseBoolean(\"${System.env.LOAD_SEED_DATA}\")";
	}

	sourceSets {
		test { java.srcDirs = [ 'src/test/java', 'src/libTest/java' ] }
		androidTest { java.srcDirs = [ 'src/androidTest/java', 'src/libTest/java' ] }
	}

	signingConfigs {
		release {
			storeFile file(System.env.ANDROID_KEYSTORE_PATH ?: signingConfigs.debug.storeFile)
			storePassword System.env.ANDROID_KEYSTORE_PASSWORD ?: signingConfigs.debug.storePassword
			keyAlias System.env.ANDROID_KEY_ALIAS ?: signingConfigs.debug.keyAlias
			keyPassword System.env.ANDROID_KEY_PASSWORD ?: signingConfigs.debug.keyPassword
		}
	}

	buildTypes {
		debug {
			testCoverageEnabled = true
		}
		release {
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'config/proguard.pro'
			signingConfig signingConfigs.release
		}
	}

	check {
		abortOnError true
	}

	lintOptions {
		disable 'UnusedResources' // linter can't handle static imports, so just skip this test
		disable 'IconMissingDensityFolder' // we don't care about nice icons at the moment

		warningsAsErrors true

		if(System.env.TRAVIS == 'true') {
			abortOnError true
			htmlReport false
			xmlReport false
			textReport true
			textOutput 'stdout'
		}
	}
}
